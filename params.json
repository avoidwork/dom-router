{"name":"dom-router","tagline":"URL hash to DOM router","body":"DOM router which automatically, & intelligently toggles visibility of `Elements` based on `hashchange` events.\r\nThis provides a clean separation of concerns, and progressive enhancement in a simple library. A `callback` allows\r\nyou to handle the application state change the way you want.\r\n\r\n## Example\r\n```javascript\r\nvar router = require('dom-router'),\r\n    r;\r\n\r\n// Router will write to console on `hashchange`\r\nr = router({callback: function (arg) {\r\n    console.log(arg.element.id, \"is visible\");\r\n}});\r\n```\r\n\r\n## How can I load dom-router?\r\ndom-router can be installed from npm, & bower, and supports CJS, AMD, & script tags.\r\nWhen loaded with a script tag, `window.router` will be created.\r\n\r\n## Configuration\r\n#### active\r\n`Boolean` which enables/disables routing\r\n\r\n#### callback\r\nFunction to execute after route has changed, takes `arg` which describes the event\r\n\r\n#### css\r\n`Object` with `active`, & `hidden` keys which have corresponding CSS class values, defaults to \"active\", & \"hidden\"\r\n\r\n#### ctx\r\nContext for DOM selector, defaults to `body` if not specified\r\n\r\n#### log\r\nLogs routing to `router.history[]` if enabled, defaults to `false` (could be a memory leak if logging is enabled and target `Elements` are removed from DOM)\r\n\r\n## API\r\n#### current()\r\nReturns the current `Route`, if logging is enabled\r\n\r\n\r\n## Requirements\r\n- `Element.classList` API, or shim\r\n\r\n## License\r\nCopyright (c) 2014 Jason Mulligan\r\nLicensed under the BSD-3 license\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}